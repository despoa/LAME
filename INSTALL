LAME 3.xx    January 2001  Mark Taylor (http://www.mp3dev.org)


=======================================================================
Compile time options
=======================================================================
There are serveral targets which can be built from this
source code:

lame/lame.exe   The command line encoder

lame_enc.dll    a Windows DLL used by many GUIs which support lame.
                (Can only be compiled by MSVC???)

libmp3lame.a    the *NIX style encoding library
libmp3lame.so   shared version of libmp3lame.a


The following compile time options can be used.  For libmp3lame.a
and lame_enc.dll, none are required.  On non-unix systems,
these options must be set in Makefile or in the IDE.  
On unix systems, they are set via ./configure.  


#define HAVE_MPGLIB   compile in mpglib's mp3 *decoding* capibility
#define HAVE_VORBIS   compile in Vorbis decoding capibility
                     (you need libvorbis already built)
#define NOANALYSIS   do not compile in hooks used by the 
                     MP3 frame analyzer.


Options for the command line encoder:
#define LIBSNDFILE   to use Erik de Castro Lopo's libsndfile
                     for input.
#define BRHIST       to allow the optional display of the VBR histogram



=======================================================================
Building the software on *NIX platforms using configure:
=======================================================================
Run the following commands:

% ./configure
% make 
% make install

For a complete list of options, try "./configure --help"
Some of the more usefull options:

For the encoding library:

  --enable-mp3x               Build the mp3 frame analyzer, 'mp3x'

  --enable-mp3rtp             Build the encode-to-RTP program, 'mp3rtp'
 
  --enable-debug              Build a debug version


For the LAME front end encoder:

  --with-fileio=lame          Use lame's internal file io routines [default]
               =sndfile       Use Erik de Castro Lopo's libsndfile (no stdin possible currently)

  --with-sndfile-prefix=DIR   Alternate location for libsndfile
                              (if --with-fileio=sndfile)

  --enable-brhist             Include the VBR bitrate histogram feature 
                              (default:yes if any ncurses/termcap available)"


Other usefull configure options:

--prefix = PATH               default is /usr/local
                              (LAME currently installs:
                                /usr/local/bin/lame
                                /usr/local/lib/libmp3lame.a
                                /usr/local/lib/libmp3lame.so
                                /usr/local/include/lame.h

                        

=======================================================================
Building the software on *NIX platforms without configure:
=======================================================================
% make -f Makefile.unix



=======================================================================
Building the software on Windows with MSVC:
=======================================================================
There are MSVC project files, and a Makefile.MSVC included
with the project.  For production use, be sure to compile
a "Release" target, with the "maximum speed" compile
option, and #define NDEBUG.   

It is possible to compile the GTK frame analyzer under windows, see
README.WINGTK

Various build options can be set in configMS.h



=======================================================================
Building the software on Windows with free compilers:
=======================================================================
LAME can be compiled with various Windows MSDOS ports (all free)
of GCC (DJGPP, Mingw32).  See README.DJGPP.  

For Mingw32, you should now be able to use the Unix Makefile that
comes with LAME.  Try: "make -f Makefile.unix UNAME=MSDOS"
You may need to remove these lines from brhist.c:

#ifdef _WIN32
COORD Pos;
HANDLE CH;
CONSOLE_SCREEN_BUFFER_INFO CSBI;
#endif

To use the Borland C compiler (now free!) see README.B32 and Makefile.B32.
Borland can also compile the lame_enc.dll, but this is untested.

Can DJGPP or Mingw32 produce lame_enc.dll?

Various build options can be set in configMS.h






