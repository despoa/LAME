# Makefile.MSVC: MSVC Makefile for LAME 3.88
#
# 2000-11-21 Robert Hegemann  e-mail: Robert.Hegemann@gmx.de
# dedicated to the LAME project http://www.mp3dev.org
###############################################################################

# targets <-> DOS filenames
T_LAME = lame.exe
T_LDLL = lame_enc.dll
T_MP3X = mp3x.exe

# default targets
PGM = $(T_LAME) $(T_LDLL)

# some default settings

COMP = INTEL

!	IF "$(ASM)" == ""
ASM = YES
!	ENDIF

!	IF "$(MMX)" == ""
MMX = YES
!	ENDIF

!	IF "$(CFG)" == ""
CFG = RH
!	ENDIF

!	IF "$(CPU)" == ""
CPU = P3
!	ENDIF

!	IF "$(OPT)" == ""
OPT = NORMAL
!	ENDIF


!	MESSAGE ----------------------------------------------------------------------
!	MESSAGE building LAME featuring $(CFG)
!	IF "$(ASM)" == "YES"
!	MESSAGE + ASM
!	ENDIF 
!	IF "$(MMX)" == "YES"
!	MESSAGE + MMX
!	ENDIF 
!	IF "$(GTK)" == "YES"
!	MESSAGE + GTK
!	ENDIF 
!	IF "$(COMP)" == "INTEL"
!	MESSAGE using INTEL COMPILER
!	IF "$(CPU)" == "P1"
!	MESSAGE + optimizing for Pentium (MMX) (may slow down PIII a few percent)
!	ELSE
!	MESSAGE + optimizing for Pentium II/III (slows down Pentium a few percent)
!	ENDIF
!	IF "$(OPT)" == "NORMAL"
!	MESSAGE + perform single-file optimizations
!	ENDIF
!	IF "$(OPT)" == "EXTRA"
!	MESSAGE + perform multi-file optimizations
!	ENDIF
!	IF "$(OPT)" == "ULTRA"
!	MESSAGE + perform multi-file optimizations over entire program
!	ENDIF
!	ENDIF
!	MESSAGE ----------------------------------------------------------------------

!	IF "$(COMP)" != "INTEL"
# Microsoft C options
CC = cl
LN = link

# debugging options
# CC_OPTS = /nologo /Zi /Ge /GZ
# LN_OPTS = /nologo /debug:full /debugtype:cv /fixed:no

# profiling options
# CC_OPTS = /nologo /Zi /O2ab2gitwy /G6AFs /DNDEBUG 
# LN_OPTS = /nologo /debug:full /debugtype:cv /fixed:no /profile

# release options
CC_OPTS = /nologo /O2ab2gitwy /G6AFs /DNDEBUG 
LN_OPTS = /nologo

LN_DLL = /DLL
LN_OUT = /OUT:

!	ELSE

#__ Intel 4.5 options _________________________________________________________
#CC_OPTS = /nologo /DNDEBUG /Qunroll /O2 /G5AFs /QaxM /Qipo_obj /QIfist- 
# /YX         enable automatic precompiled header file creation/usage
# /Ox         maximum optimization
# /Ow         assume no aliasing within functions, but across calls
# /Gd      1) make cdecl the default calling convention
# /G5      2) optimized for Pentium
# /G6      3) optimized for Pentium II/III
# /GA         assume single threaded
# /Gs[n]      disable stack checks for functions with < n bytes of locals
# /GF     	  read-only string pooling optimization
# /Qunroll    unroll loops with default heuristic
# /QIfist     enable fast float to int conversion
# /QIfdiv     enable patch for Pentium with FDIV erratum
# /QI0f	 	  enable patch for Pentium with 0f erratum
# /Qip     2) enable single-file IP optimizations (within files)
# /Qipo       enable multi-file IP optimizations (between files)
# /Qipo_wp 4) enable entire program multi-file IP optimizations
# /QaxiMK     automatic use of specialized code for PII/III, MMX, SIMD
#
# remarks: 
# 1) slows speed down, not using
# 2) faster compared to 3) or 4) on Pentium MMX at 200 MHz

!	IF "$(CPU)" == "P1"
CCOPTS = /G5
!	ELSE
CCOPTS = /G6
!	ENDIF
!	IF "$(OPT)" == "NORMAL"
CCOPTS = $(CCOPTS) /Qip
!	ELSE
!	IF "$(OPT)" == "EXTRA"
CCOPTS = $(CCOPTS) /Qip /Qipo
!	ELSE
!	IF "$(OPT)" == "ULTRA"
CCOPTS = $(CCOPTS) /Qip /Qipo_wp
!	ENDIF
!	ENDIF
!	ENDIF

CC_OPTS = /nologo /DNDEBUG /YX /Ox /GA /Gs1024 /GF \
          /Qunroll /QIfist /QIfdiv /QI0f /QaxiMK $(CCOPTS) 

LN_OPTS = $(CC_OPTS) 
LN_DLL = /LD
LN_OUT = /Fe

CC = icl
LN = icl
#--------------------------------------------------------- Intel 4.5 options --

!	ENDIF



#-- MISC --
SNDLIB = /DLAMESNDFILE
LIBSNDFILE =

BRHIST_SWITCH = /DBRHIST
TIMER_SWITCH =

CPP_OPTS = /DHAVE_CONFIG_H -I.



#== FRAME ANALYZER SUPPORT ====================================================
# assuming you have "glib-dev" and "gtk+-dev" installed
# and the system DLLs "glib-1.3.dll", "gdk-1.3.dll" and "gtk-1.3.dll"
# copied into the "Win\System" folder
#
# to compile in the frame analyzer support,
# you need the above mentioned libraries 
# and to uncomment the following lines
#
!	IF "$(GTK)" == "YES"
GTK_DIRS = ../src
GTK_OPTS = -I$(GTK_DIRS)/glib     \
           -I$(GTK_DIRS)/gtk+     \
           -I$(GTK_DIRS)/gtk+/gtk \
           -I$(GTK_DIRS)/gtk+/gdk
GTK_LIBS = $(GTK_DIRS)/gtk+/gtk/gtk-1.3.lib \
           $(GTK_DIRS)/gtk+/gdk/gdk-1.3.lib \
           $(GTK_DIRS)/glib/glib-1.3.lib
             
PGM = $(T_MP3X) $(PGM)
!	ELSE
!	IF "$(GTK)" == ""
!	MESSAGE Pass GTK=YES to build the frame analyzer. (requires installed GTK)
!	ENDIF
!	ENDIF
#==================================================== FRAME ANALYZER SUPPORT ==



#== VORBIS SUPPORT ============================================================
#
# uncomment the following if you have Vorbis
#
#VORBIS = /DHAVE_VORBIS -I../vorbis/include
#VORBISLIB = ../vorbis/lib/vorbis.lib
#============================================================ VORBIS SUPPORT ==



#== MPG123 DECODING ===========================================================
#
#	uncomment the following if you want decoding support
#
CPP_OPTS = $(CPP_OPTS) /DHAVE_MPGLIB /DUSE_LAYER_1 /DUSE_LAYER_2
#=========================================================== MPG123 DECODING ==



#== Takehiro's IEEE hack ======================================================
#
#	uncomment the following to enable Takehiro's IEEE hack
#
CPP_OPTS = $(CPP_OPTS) /DTAKEHIRO_IEEE754_HACK
#====================================================== Takehiro's IEEE hack ==



#== Robert's alternate code ===================================================
#
#	uncomment the following to enable some alternate code
#
!	IF "$(CFG)" == "RH"
CPP_OPTS = $(CPP_OPTS) /DRH_AMP /DRH
!	ENDIF
#=================================================== Robert's alternate code ==



CC_SWITCHES = $(CC_OPTS) $(SNDLIB) $(VORBIS) $(BRHIST_SWITCH) \
              $(TIMER_SWITCH) /DBS_FORMAT=BINARY

LN_SWITCHES = $(LN_OPTS)

lame_sources = \
	frontend/main.c  

mpx_sources = \
	frontend/gpkplotting.c \
	frontend/gtkanal.c \
	frontend/mp3x.c 

dll_sources = \
	dll/BladeMP3EncDll.c
	
common_sources = \
	frontend/portableio.c \
	frontend/get_audio.c \
	frontend/parse.c \
	frontend/timestatus.c \
	frontend/lametime.c \
	frontend/brhist.c 

lamelib_sources = \
	libmp3lame/bitstream.c \
	libmp3lame/encoder.c \
	libmp3lame/fft.c \
	libmp3lame/id3tag.c \
	libmp3lame/lame.c \
	libmp3lame/newmdct.c \
	libmp3lame/psymodel.c \
	libmp3lame/quantize.c \
	libmp3lame/quantize_pvt.c \
	libmp3lame/vbrquantize.c \
	libmp3lame/reservoir.c \
	libmp3lame/tables.c \
	libmp3lame/takehiro.c \
	libmp3lame/util.c \
	libmp3lame/vorbis_interface.c \
	libmp3lame/mpglib_interface.c \
	libmp3lame/VbrTag.c \
	libmp3lame/version.c 

mpglib_sources = \
	mpglib/common.c \
	mpglib/dct64_i386.c \
	mpglib/decode_i386.c \
	mpglib/layer1.c \
	mpglib/layer2.c \
	mpglib/layer3.c \
	mpglib/tabinit.c \
	mpglib/interface.c 



LIB_OBJ = $(lamelib_sources:.c=.obj)
MPG_OBJ = $(mpglib_sources:.c=.obj)
CMMN_OBJ = $(common_sources:.c=.obj)
LAME_OBJ = $(lame_sources:.c=.obj)
MPX_OBJ = $(mpx_sources:.c=.obj)
DLL_OBJ = $(dll_sources:.c=.obj)


all :	$(PGM)
	@echo.
	@echo --=*  $(PGM) uptodate  *=--
	@echo.

#== NASM ======================================================================
#
#	NASM: Netwide Assembler
#
!	IF "$(ASM)" == "YES"
libmp3lame/i386/cpu_feat.obj: libmp3lame/i386/cpu_feat.nas
	@echo assemble CPU-feature detection, using NASM the Netwide Assembler
	@nasmw -f win32 -i libmp3lame/i386/ -DWIN32 \
		libmp3lame/i386/cpu_feat.nas \
		-o libmp3lame/i386/cpu_feat.obj
                
CC_SWITCHES = $(CC_SWITCHES) /DHAVE_NASM
ASM_OBJ = $(ASM_OBJ) libmp3lame/i386/cpu_feat.obj
!	ENDIF
#====================================================================== NASM ==

#== MMX =======================================================================
#
#	you have NASM and a processor with MMX 
#
!	IF "$(ASM)" == "YES"
!	IF "$(MMX)" == "YES"
libmp3lame/i386/choose_table.obj: libmp3lame/i386/choose_table.nas
	@echo assemble MMX choose table, using NASM the Netwide Assembler
	@nasmw -f win32 -i libmp3lame/i386/ -DWIN32 \
		libmp3lame/i386/choose_table.nas \
		-o libmp3lame/i386/choose_table.obj

CC_SWITCHES = $(CC_SWITCHES) /DMMX_choose_table
ASM_OBJ = $(ASM_OBJ) libmp3lame/i386/choose_table.obj
!	ENDIF
!	ENDIF
#======================================================================= MMX ==

!	MESSAGE


config.h : configMS.h
	@-copy configMS.h config.h


.c.obj: 
	@$(CC) $(CPP_OPTS) $(CC_SWITCHES) -Iinclude -Ilibmp3lame \
	       /c $< /Fo$@

$(MPX_OBJ) : $(mpx_sources)
	@$(CC) $(CPP_OPTS) $(CC_SWITCHES) $(GTK_OPTS) \
	       -Iinclude -Impglib -Ilibmp3lame /c $** /Fofrontend/
	@echo.
	@echo --- FRAME ANALYZER STUFF READY ---
	@echo.

$(CMMN_OBJ): $(common_sources) 
	@$(CC) $(CPP_OPTS) $(CC_SWITCHES) -Iinclude /c $** /Fofrontend/
	@echo.
	@echo --- COMMON FRONTEND STUFF UPTODATE ---
	@echo.

$(LIB_OBJ) : $(lamelib_sources)
	@$(CC) $(CPP_OPTS) $(CC_SWITCHES) \
	       -Iinclude -Impglib /c $** /Folibmp3lame/
	@echo.
	@echo --- LAME MP3 ENCODING LIBRARY UPTODATE ---
	@echo.

$(MPG_OBJ) : $(mpglib_sources)
	@$(CC) $(CPP_OPTS) $(CC_SWITCHES) \
	       -Iinclude -Ilibmp3lame /c $** /Fompglib/
	@echo.
	@echo --- MPG123 DECODING LIBRARY UPTODATE ---
	@echo.

lib: $(ASM_OBJ) $(LIB_OBJ) $(MPG_OBJ)

$(T_LAME) : config.h lib $(CMMN_OBJ) $(LAME_OBJ)
	@$(LN) $(LN_SWITCHES) $(LIBSNDFILE) $(VORBISLIB) \
	       $(ASM_OBJ) $(LIB_OBJ) $(MPG_OBJ) $(CMMN_OBJ) $(LAME_OBJ) \
		   $(LN_OUT)$@
	@echo.
	@echo --=*  $(T_LAME) ready  *=--
	@echo.

$(T_LDLL) : config.h lib $(CMMN_OBJ) $(DLL_OBJ)
	@$(LN) $(LN_SWITCHES) $(LIBSNDFILE) $(VORBISLIB) \
	       $(ASM_OBJ) $(LIB_OBJ) $(MPG_OBJ) $(DLL_OBJ) \
		   $(LN_DLL) $(LN_OUT)$@
	@echo.
	@echo --=*  $(T_LDLL) ready  *=--
	@echo.
	
$(T_MP3X) : config.h lib $(CMMN_OBJ) $(MPX_OBJ)
	@$(LN) $(LN_SWITCHES) $(GTK_LIBS) $(LIBSNDFILE) $(VORBISLIB) \
	       $(ASM_OBJ) $(LIB_OBJ) $(MPG_OBJ) $(CMMN_OBJ) $(MPX_OBJ) \
		   $(LN_OUT)$@
	@echo.
	@echo --=*  $(T_MP3X) ready  *=--
	@echo.

clean:
	@-del *.exe
	@-del icl.pch
	@-del lame_enc.*
	@-del frontend\*.obj
	@-del dll\*.obj
	@-del mpglib\*.obj
	@-del libmp3lame\*.obj
	@-del libmp3lame\i386\*.obj


rebuild: clean all

lame	:	$(T_LAME)
dll 	:	$(T_LDLL)
mp3x	:	$(T_MP3X)
