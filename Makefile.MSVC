# Makefile.MSVC: MSVC Makefile for LAME 3.88

PGM = lame dll

# some default settings
!IF "$(ASM)" == ""
ASM = YES
!ENDIF
!IF "$(MMX)" == ""
MMX = YES
!ENDIF
!IF "$(CFG)" == ""
CFG = RH
!ENDIF

!MESSAGE ----------------------------------------------------------------------
!MESSAGE BUILDING LAME featuring $(CFG)
!IF "$(ASM)" == "YES"
!MESSAGE + ASM
!ENDIF 
!IF "$(MMX)" == "YES"
!MESSAGE + MMX
!ENDIF 
!IF "$(GTK)" == "YES"
!MESSAGE + GTK
!ENDIF 
!MESSAGE ----------------------------------------------------------------------

# Microsoft C options
# CC = cl
# LN = link

# Intel 4.5 compiler
CC = icl
LN = xilink

# debugging options
# CC_OPTS = /nologo /Zi /Ge /GZ
# LN_OPTS = /nologo /debug:full /debugtype:cv /fixed:no

# profiling options
# CC_OPTS = /nologo /Zi /O2ab2gitwy /G6AFs /DNDEBUG 
# LN_OPTS = /nologo /debug:full /debugtype:cv /fixed:no /profile

# release options
# CC_OPTS = /nologo /O2ab2gitwy /G6AFs /DNDEBUG 
# LN_OPTS = /nologo

# Intel 4.5 options
#CC_OPTS = /nologo /DNDEBUG /Qunroll /O2 /G5AFs /QaxM /Qipo_obj /QIfist- 
# /Ox     	maximum optimization
# /G5     	optimized for Pentium
# /Gs[n]	disable stack checks for functions with less than n bytes of locals
# /Qunroll	unroll loops with default heuristic
# /GA     	assume single threaded
# /GF     	read-only string pooling optimization
# /QIfist 	enable fast float to int conversion
# /QIfdiv 	enable patch for Pentium with FDIV erratum
# /QI0f	 	enable patch for Pentium with 0f erratum
# /Qip
# /QaxM	    currently crashes at the end of encoding! 
#           so disabled by now, needs some attention
CC_OPTS = /nologo /DNDEBUG /Qunroll /Ox /G5 /GA /Gs1024 /GF /QIfist /QIfdiv /QI0f /Qip 
LN_OPTS = /nologo


SNDLIB = /DLAMESNDFILE
LIBSNDFILE =
LIBS =
MAKEDEP =
TIMER_SWITCH =
BRHIST_SWITCH = /DBRHIST
LIBTERMCAP =

CPP_OPTS = /DHAVE_CONFIG_H -I.

#== FRAME ANALYZER SUPPORT ====================================================
# assuming you have "glib-dev" and "gtk+-dev" installed
# and the system DLLs "glib-1.3.dll", "gdk-1.3.dll" and "gtk-1.3.dll"
# copied into the "Win\System" folder
#
# to compile in the frame analyzer support,
# you need the above mentioned libraries 
# and to uncomment the following lines
#
!IF "$(GTK)" == "YES"
GTK_OPTS = -I../src/glib     \
           -I../src/gtk+     \
           -I../src/gtk+/gtk \
           -I../src/gtk+/gdk
GTK_LIBS = /LIBPATH:../src/gtk+/gtk \
           /LIBPATH:../src/gtk+/gdk \
           /LIBPATH:../src/glib     \
           glib-1.3.lib gdk-1.3.lib gtk-1.3.lib
PGM = mp3x $(PGM)
!ELSE
!IF "$(GTK)" == ""
!MESSAGE Pass GTK=YES to build the frame analyzer. (requires installed GTK)
!ENDIF
!ENDIF
#==================================================== FRAME ANALYZER SUPPORT ==


#== VORBIS SUPPORT ============================================================
#
# uncomment the following if you have Vorbis
#
#VORBIS = /DHAVE_VORBIS -I../vorbis/include
#VORBISLIB = /LIBPATH:../vorbis/lib vorbis.lib
#============================================================ VORBIS SUPPORT ==


#== MPG123 DECODING ===========================================================
#
#	uncomment the following if you want decoding support
#
CPP_OPTS = $(CPP_OPTS) /DHAVE_MPGLIB /DUSE_LAYER_1 /DUSE_LAYER_2
#=========================================================== MPG123 DECODING ==


#== Takehiro's IEEE hack ======================================================
#
#	uncomment the following to enable Takehiro's IEEE hack
#
CPP_OPTS = $(CPP_OPTS) /DTAKEHIRO_IEEE754_HACK
#====================================================== Takehiro's IEEE hack ==


#== Robert's alternate code ===================================================
#
#	uncomment the following to enable some alternate code
#
!IF "$(CFG)" == "RH"
CPP_OPTS = $(CPP_OPTS) /DRH_AMP /DRH
!ENDIF
#=================================================== Robert's alternate code ==


CC_SWITCHES = $(CC_OPTS) $(DISTRIB) $(SNDLIB) $(BRHIST_SWITCH) \
              /DBS_FORMAT=BINARY $(TIMER_SWITCH) $(VORBIS)

LN_SWITCHES = $(LN_OPTS)

lame_sources = \
	frontend/main.c  

mpx_sources = \
	frontend/gpkplotting.c \
	frontend/gtkanal.c \
	frontend/mp3x.c 

dll_sources = \
	dll/BladeMP3EncDll.c
	
common_sources = \
	frontend/portableio.c \
	frontend/get_audio.c \
	frontend/parse.c \
	frontend/timestatus.c \
	frontend/lametime.c \
	frontend/brhist.c 

lamelib_sources = \
	libmp3lame/bitstream.c \
	libmp3lame/encoder.c \
	libmp3lame/fft.c \
	libmp3lame/id3tag.c \
	libmp3lame/lame.c \
	libmp3lame/newmdct.c \
	libmp3lame/psymodel.c \
	libmp3lame/quantize.c \
	libmp3lame/quantize_pvt.c \
	libmp3lame/vbrquantize.c \
	libmp3lame/reservoir.c \
	libmp3lame/tables.c \
	libmp3lame/takehiro.c \
	libmp3lame/util.c \
	libmp3lame/vorbis_interface.c \
	libmp3lame/mpglib_interface.c \
	libmp3lame/VbrTag.c \
	libmp3lame/version.c 

mpglib_sources = \
	mpglib/common.c \
	mpglib/dct64_i386.c \
	mpglib/decode_i386.c \
	mpglib/layer1.c \
	mpglib/layer2.c \
	mpglib/layer3.c \
	mpglib/tabinit.c \
	mpglib/interface.c 



LIB_OBJ = $(lamelib_sources:.c=.obj)
MPG_OBJ = $(mpglib_sources:.c=.obj)
CMMN_OBJ = $(common_sources:.c=.obj)
LAME_OBJ = $(lame_sources:.c=.obj)
MPX_OBJ = $(mpx_sources:.c=.obj)
DLL_OBJ = $(dll_sources:.c=.obj)


all :	$(PGM)

#== NASM ======================================================================
#
#	uncomment the following if you have NASM 
#	NASM: Netwide Assembler
#
!IF "$(ASM)" == "YES"
libmp3lame/i386/cpu_feat.obj: libmp3lame/i386/cpu_feat.nas
	@echo assemble CPU-feature detection, using NASM the Netwide Assembler
	@nasmw -f win32 -i libmp3lame/i386/ -DWIN32 \
		libmp3lame/i386/cpu_feat.nas \
		-o libmp3lame/i386/cpu_feat.obj
                
CC_SWITCHES = $(CC_SWITCHES) /DHAVE_NASM
ASM_OBJ = $(ASM_OBJ) libmp3lame/i386/cpu_feat.obj
!ENDIF
#====================================================================== NASM ==

#== MMX =======================================================================
#
#	uncomment the following if you have NASM and a processor with MMX 
#	NASM: Netwide Assembler
#
!IF "$(ASM)" == "YES"
!IF "$(MMX)" == "YES"
libmp3lame/i386/choose_table.obj: libmp3lame/i386/choose_table.nas
	@echo assemble MMX choose table, using NASM the Netwide Assembler
	@nasmw -f win32 -i libmp3lame/i386/ -DWIN32 \
		libmp3lame/i386/choose_table.nas \
		-o libmp3lame/i386/choose_table.obj

CC_SWITCHES = $(CC_SWITCHES) /DMMX_choose_table
ASM_OBJ = $(ASM_OBJ) libmp3lame/i386/choose_table.obj
!ENDIF
!ENDIF
#======================================================================= MMX ==

!MESSAGE


.c.obj: 
	@$(CC) $(CPP_OPTS) $(CC_SWITCHES) -Iinclude -Ilibmp3lame /c $< /Fo$@

$(LIB_OBJ) : $(lamelib_sources)
	@echo --- LAME MP3 ENCODING LIBRARY ---
	@$(CC) $(CPP_OPTS) $(CC_SWITCHES) -Iinclude -Impglib /c $(lamelib_sources) /Folibmp3lame/

$(MPG_OBJ) : $(mpglib_sources)
	@echo --- MPG123 DECODING LIBRARY ---
	@$(CC) $(CPP_OPTS) $(CC_SWITCHES) -Iinclude -Ilibmp3lame /c $(mpglib_sources) /Fompglib/

$(CMMN_OBJ) : $(common_sources)
	@echo --- FRONTEND STUFF ---
	@$(CC) $(CPP_OPTS) $(CC_SWITCHES) -Iinclude /c $(common_sources) /Fofrontend/

$(MPX_OBJ) : $(mpx_sources)
	@echo --- FRAME ANALYZER STUFF ---
	@$(CC) $(CPP_OPTS) $(CC_SWITCHES) $(GTK_OPTS) \
	       -Iinclude -Impglib -Ilibmp3lame /c $(mpx_sources) /Fofrontend/

lame: config lib common Makefile.MSVC $(LAME_OBJ)
	@$(LN) $(LN_SWITCHES) $(LIBSNDFILE) $(VORBISLIB) \
	       $(ASM_OBJ) $(LIB_OBJ) $(MPG_OBJ) $(CMMN_OBJ) $(LAME_OBJ) /out:lame.exe /map
	@echo --- LAME ENCODER READY ---

mp3x: config lib common Makefile.MSVC $(MPX_OBJ)
	@$(LN) $(LN_SWITCHES) $(GTK_LIBS) $(LIBSNDFILE) $(VORBISLIB) \
	       $(ASM_OBJ) $(LIB_OBJ) $(MPG_OBJ) $(CMMN_OBJ) $(MPX_OBJ) /out:mp3x.exe /map
	@echo --- FRAME ANALYZER READY ---

dll: config lib common Makefile.MSVC $(DLL_OBJ)
	@$(LN) $(LN_SWITCHES) $(LIBSNDFILE) $(VORBISLIB) \
	       $(ASM_OBJ) $(LIB_OBJ) $(MPG_OBJ) $(DLL_OBJ) /DLL /out:lame_enc.dll /map	
	@echo --- LAME ENCODER DLL READY ---

lib: config Makefile.MSVC $(ASM_OBJ) $(LIB_OBJ) $(MPG_OBJ)

common: config Makefile.MSVC $(CMMN_OBJ)

config: configMS.h
	@-copy configMS.h config.h

clean:
	@-del frontend\*.obj
	@-del dll\*.obj
	@-del libmp3lame\*.obj
	@-del libmp3lame\i386\*.obj
	@-del mpglib\*.obj
	@-del *.map
	@-del lame_enc.*
	@-del *.exe
	

rebuild: clean all

