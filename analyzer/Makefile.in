#
# Makefile.in for LAME 3.xx
#
# processed by ./configure to produce Makefile
#
#
# these variables are available on command line:
#
#   make UNAME=xxxxx ARCH=xxxxx   - specify a type of host
#   make PGM=lame_exp             - specify a name of an executable file
#
#
SHELL = @SHELL@
@SET_MAKE@

UNAME = $(shell uname)
ARCH = $(shell uname -m)


prefix = @prefix@
exec_prefix = @exec_prefix@

BINDIR = @bindir@
LIBDIR = $(prefix)/lib
INCLUDEDIR = $(prefix)/include
CC     = @CC@
CFLAGS = @CONFIG_OPTS@
LIBS   = @CONFIG_LIBS@
LDFLAGS= @CONFIG_LDFLAGS@ @GTK_LDFLAGS@
INSTALL= @INSTALL@
INSTALL_PROGRAM=@INSTALL_PROGRAM@
INSTALL_DATA=@INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@

# generic defaults. OS specific options go in versious sections below
PGM ?= mp3x
CPP_OPTS = -I./ -I../frontend -I../include -I../libmp3lame   @CPP_OPT@ @GTK_OPTS@ 
CC_OPTS = -O
AR = ar
RANLIB = @RANLIB@
MAKEDEP = -M
RM_F = rm -f
LN_S = @LN_S@




##########################################################################
# LINUX   
##########################################################################
ifeq ($(UNAME),Linux)

# suggested for gcc-2.7.x
   CC_OPTS =  -O3 -fomit-frame-pointer -funroll-loops -ffast-math  -finline-functions -Wall -pedantic
#  CC_OPTS =  -O9 -fomit-frame-pointer -fno-strength-reduce -mpentiumpro -ffast-math -finline-functions -funroll-loops -Wall -malign-double -g -march=pentiumpro -mfancy-math-387 -pipe -pedantic

#  for debugging:
#  CC_OPTS =  -UNDEBUG -O -Wall -pedantic -ggdb -DABORTFP

#  for lots of debugging:
#   CC_OPTS =  -DDEBUG -UNDEBUG  -O -Wall -pedantic -g -DABORTFP 


#  some alternate code (work in progress Robert.Hegemann@gmx.de)
#  CPP_OPTS += -DRH_AMP -DRH_VALIDATE_MS
# these options for gcc-2.95.2 to produce fast code
#   CC_OPTS = \
#	-Wall -O9 -fomit-frame-pointer -march=pentium \
#	-finline-functions -fexpensive-optimizations \
#	-funroll-loops -funroll-all-loops -pipe -fschedule-insns2 \
#	-fstrength-reduce \
#	-malign-double -mfancy-math-387 -ffast-math 


##########################################################################
# LINUX on Digital/Compaq Alpha CPUs
##########################################################################
ifeq ($(ARCH),alpha)

################################################################
#### Check if 'ccc' is in our path
####   if not, use 'gcc'
################################################################
ifeq ($(shell which ccc 2>/dev/null | grep -c ccc),0)

# double is faster than float on Alpha
CC_OPTS =       -O4 -pedantic -Wall -fomit-frame-pointer -ffast-math -funroll-loops \
                -mfp-regs -fschedule-insns -fschedule-insns2 \
                -finline-functions \
#                -DFLOAT=double
# add "-mcpu=21164a -Wa,-m21164a" to optimize for 21164a (ev56) CPU

################################################################
#### else, use 'ccc'
################################################################
else

# Compaq's C Compiler
CC = ccc

################################################################
#### set 'CC_OPTS = -arch host -tune host' to generate/tune instructions for this machine
####     'CC_OPTS += -migrate -fast -inline speed -unroll 0' tweak to run as fast as possible :)
####     'CC_OPTS += -w0 -pedantic -Wall' set warning and linking flags
################################################################
CC_OPTS = -arch host -tune host
CC_OPTS += -migrate -fast -inline speed -unroll 0
CC_OPTS += -w0 -pedantic -Wall


################################################################
#### to debug, uncomment
################################################################
# For Debugging
#CC_OPTS += -g3

################################################################
#### define __DECALPHA__ (i was getting re-declaration warnings
####   in machine.h
################################################################
# Define DEC Alpha
CPP_OPTS += -D__DECALPHA__

# standard Linux libm
#LDFLAGS	+=	-lm
# optimized libffm (free fast math library)
#LDFLAGS	+=	-lffm
# Compaq's fast math library
LDFLAGS    +=       -lcpml
endif  #  gcc or ccc?
endif  #  alpha 
endif  #  linux



##########################################################################
# FreeBSD
##########################################################################
ifeq ($(UNAME),FreeBSD)
  # nothing left...
endif


##########################################################################
# OpenBSD
##########################################################################
ifeq ($(UNAME),OpenBSD)
  # nothing left...
endif



##########################################################################
# SunOS
##########################################################################
ifeq ($(UNAME),SunOS) 
   CC = cc
   CC_OPTS = -O -xCC  	
   MAKEDEP = -xM
# for gcc, use instead:
#   CC = gcc 
#   CC_OPTS = -O 
#   MAKEDEP = -M 
endif


##########################################################################
# SGI
##########################################################################
ifeq ($(UNAME),IRIX64) 
   CC = cc
   CC_OPTS = -O3 -woff all 

endif

ifeq ($(UNAME),IRIX) 
   CC = cc
   CC_OPTS = -O3 -woff all 
endif



##########################################################################
# Compaq Alpha running Dec Unix (OSF)
##########################################################################
ifeq ($(UNAME),OSF1)
   CC = cc
   CC_OPTS = -fast -O3 -std -g3 -non_shared
endif

##########################################################################
# BeOS
##########################################################################
ifeq ($(UNAME),BeOS)
   CC = $(BE_C_COMPILER)
ifeq ($(ARCH),BePC)
   CC_OPTS = -O9 -fomit-frame-pointer -march=pentium \
   -mcpu=pentium -ffast-math -funroll-loops \
   -fprofile-arcs -fbranch-probabilities
else
   CC_OPTS = -opt all
   MAKEDEP = -make
endif
endif

###########################################################################
# MOSXS (Rhapsody PPC)
###########################################################################
ifeq ($(UNAME),Rhapsody)
   CC = cc
   CC_OPTS = -O9 -ffast-math -funroll-loops -fomit-frame-pointer
   MAKEDEP = -make 
endif

##########################################################################
# OS/2
##########################################################################
# Properly installed EMX runtime & development package is a prerequisite.
# tools I used: make 3.76.1, uname 1.12, sed 2.05, PD-ksh 5.2.13
#
##########################################################################
ifeq ($(UNAME),OS/2)
   SHELL=sh	
   CC = gcc
   CC_OPTS = -O3
   PGM ?= mp3x.exe

# I use the following for slightly better performance on my Pentium-II
# using pgcc-2.91.66:
#   CC_OPTS = -O6 -ffast-math -funroll-loops -mpentiumpro -march=pentiumpro

# Uncomment & inspect the 2 GTK lines to use MP3x GTK frame analyzer.
# Properly installed XFree86/devlibs & GTK+ is a prerequisite.
# The following works for me using Xfree86/OS2 3.3.5 and GTK+ 1.2.3:
#   LDFLAGS += -DHAVEGTK -IC:/XFree86/include/gtk12 -Zmt -D__ST_MT_ERRNO__ -IC:/XFree86/include/glib12 -IC:/XFree86/include
#   CFLAGS += -LC:/XFree86/lib -Zmtd -Zsysv-signals -Zbin-files -lgtk12 -lgdk12 -lgmodule -lglib12 -lXext -lX11 -lshm -lbsd -lsocket -lm
endif

###########################################################################
# MSDOS/Windows
###########################################################################
ifeq ($(UNAME),MSDOS)
  RM_F =
  PGM ?= mp3x.exe
endif

###########################################################################
# AmigaOS
###########################################################################
# Type 'Make ARCH=PPC' for PowerUP and 'Make ARCH=WOS' for WarpOS
#
###########################################################################
ifeq ($(UNAME),AmigaOS)
	CC = gcc -noixemul
	CC_OPTS = -O3 -ffast-math -funroll-loops -m68020-60 -m68881
	MAKEDEP = -MM
	ifeq ($(ARCH),WOS)
		CC = ppc-amigaos-gcc -warpup
		CC_OPTS = -O3 -ffast-math -fomit-frame-pointer -funroll-loops \
		-mmultiple -mcpu=603e
		AR = ppc-amigaos-ar
		RANLIB = ppc-amigaos-ranlib
	endif
	ifeq ($(ARCH),PPC)
		CC = ppc-amigaos-gcc
		CC_OPTS = -O3 -ffast-math -fomit-frame-pointer -funroll-loops \
		-mmultiple -mcpu=603e
		AR = ppc-amigaos-ar
		RANLIB = ppc-amigaos-ranlib
	endif
endif















# ** handled by configure **
# 10/99 added -D__NO_MATH_INLINES to fix a bug in *all* versions of
# gcc 2.8+ as of 10/99.  

CC_SWITCHES = -DNDEBUG $(CC_OPTS) $(CFLAGS)

c_sources = @CONFIG_SOURCES@ \
        ../frontend/lametime.c \
	../frontend/timestatus.c \
	../frontend/portableio.c \
	../frontend/ieeefloat.c \
	../frontend/parse.c \
	../frontend/get_audio.c \
        gtkanal.c gpkplotting.c

OBJ = $(c_sources:.c=.o)
DEP = $(c_sources:.c=.d)



%.o: %.s
	gcc -c $< -o $@

%.o: %.c 
	$(CC) $(CPP_OPTS) $(CC_SWITCHES) -c $< -o $@

%.d: %.c
	$(SHELL) -ec '$(CC) $(MAKEDEP)  $(CPP_OPTS) $(CC_SWITCHES)  $< | sed '\''s;$*.o;& $@;g'\'' > $@'


all: $(PGM)

$(PGM):	mp3x.o ../libmp3lame.a $(LIBS) $(OBJ)
	$(CC) -o mp3x mp3x.o -L.. $(OBJ) $(LIBS) $(LDFLAGS) -L.. -lmp3lame



install_program: $(PGM)
	$(INSTALL_PROGRAM) $(PGM) ${BINDIR}

install: @INSTALL_TARGETS@

uninstall:
	$(RM_F) $(BINDIR)/$(PGM)

clean:
	-$(RM_F) $(OBJ) $(DEP) $(PGM) mp3x.o mp3x 

bla:
	echo "LIB=$(SHARED_LIB) MAJOR=$(SHARED_LIB_MAJOR) MINOR=$(SHARED_LIB_MINOR)"

tags: TAGS

TAGS: ${c_sources}
	etags -T ${c_sources}

ifneq ($(MAKECMDGOALS),clean)
  -include $(DEP)
endif


