dnl Process this file with autoconf to produce a configure script.
dnl
dnl include support and option for
dnl - frontend code: 
dnl -    VBR histogram  (optional)  done.
dnl -    SNDLIB         (lame or libsndfile required) done.
dnl - libmp3lame:
dnl -    VORBIS         done.
dnl -    decoder        done.
dnl -    disable shared done.
dnl -    disable analysis hooks  done.
dnl -    shared lib version
dnl -    debugging mode
dnl -    MMX support
dnl - frame analyzer:
dnl -    make sure analysis hooks are enabled
dnl -    make sure decoder is enabled 
dnl -    check for GTK code  
dnl
dnl todo:
dnl - move all system-dependent entries from Makefile here
dnl
dnl Exported and configured variables:
dnl PGM
dnl CC
dnl CFLAGS
dnl CONFIG_DEFS
dnl LDFLAGS

dnl extra vars for GTK
dnl GTK_LDFLAGS
dnl GTK_CFLAGS

dnl extra vars for frontend:
dnl FRONTEND_LDFLAGS
dnl FRONTEND_CFLAGS
dnl FRONTEND_SOURCES

dnl extra vars for lib:
dnl LIB_SOURCES

dnl tools:
dnl AR
dnl MAKEDEP
dnl RM_F


AC_INIT(libmp3lame/lame.c)
AM_INIT_AUTOMAKE(lamelib,3.88,notdef)
dnl AM_PROG_LIBTOOL

# increase this when the shared lib becomes totally incompatible
LIB_MAJOR_VERSION=1

# increase this when changes are made, but they are upward compatible
# to previous versions
LIB_MINOR_VERSION=0

dnl check host
AC_CANONICAL_HOST

dnl Checks for programs.
#cflags_save="$CFLAGS"
AC_PROG_CC
# because AC_PROG_CC likes to set -g
#CFLAGS="$cflags_save"
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_LN_S
AC_PROG_INSTALL

dnl Initialize configuration variables for the Makefile
FILE_EXTENSION=
CFLAGS=
INCLUDES="-I../include -I."
CONFIG_DEFS="-DNDEBUG"
LDFLAGS=
GTK_LDFLAGS=
GTK_CFLAGS=
FRONTEND_LDFLAGS=
FRONTEND_CFLAGS=
FRONTEND_SOURCES=
LIB_SOURCES=
AR="ar"
MAKEDEP="-M"
RM_F="rm -f"

dnl Checks for libraries.

dnl TODO: are the functions of termcap and curses the same as for ncurses ?
AC_CHECK_LIB(termcap, initscr, HAVE_TERMCAP=termcap)
AC_CHECK_LIB(curses, initscr, HAVE_TERMCAP=curses)
AC_CHECK_LIB(ncurses, initscr, HAVE_TERMCAP=ncurses)

dnl math lib
AC_CHECK_LIB(m, cos, HAVE_LIBM=-lm)
dnl free fast math library
dnl AC_CHECK_LIB(ffm, cos, HAVE_LIBFFM=-lffm)
dnl Compaq fast math library.
HAVE_LIBCPML=
AC_CHECK_LIB(cpml, cos, HAVE_LIBCPML=-lcpml)
CONFIG_MATH_LIB="$HAVE_LIBM"

AC_CHECK_LIB(sndfile, sf_open_read, HAVE_SNDFILE=yes)
AC_CHECK_LIB(vorbis, ogg_sync_init, HAVE_VORBIS=yes)

dnl configure use of features

dnl libsndfile
AC_MSG_CHECKING(use of file io)
WARNING=
AC_ARG_WITH(fileio, 
  [  --with-fileio=lame          Use lame's internal file io routines [default]]
  [             =sndfile       Use Erik de Castro Lopo's libsndfile (no stdin possible currently)],
  CONFIG_FILEIO="$withval", CONFIG_FILEIO="lame")
AC_ARG_WITH(sndfile-prefix,
  [  --with-sndfile-prefix=DIR   Alternate location for libsndfile],
  CONFIG_SNDFILE_PREFIX="${withval}", CONFIG_SNDFILE_PREFIX="")
if test "$CONFIG_FILEIO" = "sndfile" ; then
  if test ".$CONFIG_SNDFILE_PREFIX" != "." ; then 
    # look for sndfile lib. This overrides any standard location
    LA_SEARCH_LIB(SNDFILE_LIB_LOC, SNDFILE_INC_LOC, \
      libsndfile.a, sndfile.h, $CONFIG_SNDFILE_PREFIX) 
    if test ".$SNDFILE_LIB_LOC" != "." ; then
      HAVE_SNDFILE=yes
      FRONTEND_LDFLAGS="-L$SNDFILE_LIB_LOC $FRONTEND_LDFLAGS"
      INCLUDES="-I$SNDFILE_INC_LOC $INCLUDES"
    else
      WARNING="sndfile lib not found in specified prefix."
    fi
  fi
  if test "$HAVE_SNDFILE" = "yes" ; then
    FRONTEND_LDFLAGS="-lsndfile $FRONTEND_LDFLAGS"
    CONFIG_DEFS="-DLIBSNDFILE $CONFIG_DEFS"
  else
    # default
    CONFIG_FILEIO="lame"
    WARNING="$WARNING Could not find any sndfile lib on system."
  fi
else
  CONFIG_FILEIO=lame
fi 
AC_MSG_RESULT($CONFIG_FILEIO)
if test ".$WARNING" != "." ; then
  AC_MSG_WARN($WARNING)
fi



dnl mpg123 decoder
AC_MSG_CHECKING(use of mpg123 decoder)
AC_ARG_ENABLE(decoder, 
  [  --enable-decoder            Include mpg123 decoder [default:yes]],
  CONFIG_DECODER="$enableval", CONFIG_DECODER="yes")
AC_ARG_ENABLE(decode-layer1, 
  [  --enable-decoder-layer1     Include layer1 decoding [default:yes]],
  CONFIG_DECODER_L1="$enableval", CONFIG_DECODER_L1="yes")
AC_ARG_ENABLE(decode-layer1, 
  [  --enable-decoder-layer2     Include layer2 decoding [default:yes]],
  CONFIG_DECODER_L2="$enableval", CONFIG_DECODER_L2="yes")

if test "$CONFIG_DECODER" != "no" ; then
  CONFIG_DECODER="yes (Layer"
  # todo: add code to include this in libmp3lame  
  CONFIG_DEFS="-DHAVEMPGLIB $CONFIG_DEFS"
  LIB_SOURCES="\$(mpglib_sources) $LIB_SOURCES"
  INCLUDES="-I../mpglib $INCLUDES"
  if test "$CONFIG_DECODER_L1" = "yes"; then
    CONFIG_DEFS="-DUSE_LAYER_1 $CONFIG_DEFS"
    CONFIG_DECODER="$CONFIG_DECODER 1,"
  fi
  if test "$CONFIG_DECODER_L2" = "yes"; then
    CONFIG_DEFS="-DUSE_LAYER_2 $CONFIG_DEFS"
    CONFIG_DECODER="$CONFIG_DECODER 2,"
  fi
  CONFIG_DECODER="$CONFIG_DECODER 3)"
fi
AC_MSG_RESULT($CONFIG_DECODER)


AM_PATH_GTK(1.2.0,FA_DEFAULT=yes ,FA_DEFAULT=no)

if test "$FA_DEFAULT" != "no" ; then
  GTK_LDFLAGS="`$GTK_CONFIG --libs` "
  GTK_CFLAGS=" `$GTK_CONFIG --cflags` "
else
  CONFIG_FA=no
  AC_MSG_WARN(Cannot find GTK: Is gtk-config in path?)
fi






dnl vorbis
AC_MSG_CHECKING(use of vorbis)
WARNING=
AC_ARG_WITH(vorbis, 
  [  --with-vorbis               Use vorbis library for ogg files [default:yes, if installed]],
  CONFIG_VORBIS="$withval", CONFIG_VORBIS="yes")
AC_ARG_WITH(vorbis-prefix,
  [  --with-vorbis-prefix=DIR    Alternate location for vorbis],
  CONFIG_VORBIS_PREFIX="${withval}", CONFIG_VORBIS_PREFIX="")
if test "$CONFIG_VORBIS" != "no" ; then
  if test ".$CONFIG_VORBIS_PREFIX" != "." ; then
    # look for vorbis lib. This overrides any standard location
    LA_SEARCH_LIB(VORBIS_LIB_LOC, VORBIS_INC_LOC, \
      libvorbis.a, vorbis/codec.h, $CONFIG_VORBIS_PREFIX)
    if test ".$VORBIS_LIB_LOC" != "." ; then
      HAVE_VORBIS=yes
      LDFLAGS="-L$VORBIS_LIB_LOC $LDFLAGS"
      INCLUDES="-I$VORBIS_INC_LOC $INCLUDES"
    else
      WARNING="vorbis lib not found in specified prefix."
    fi
  fi
  if test "$HAVE_VORBIS" = "yes" ; then
    LDFLAGS="-lvorbis $LDFLAGS"
    CONFIG_DEFS="-DHAVEVORBIS $CONFIG_DEFS"
  else
    CONFIG_VORBIS="no"
  fi
fi
AC_MSG_RESULT($CONFIG_VORBIS)
if test ".$WARNING" != "." ; then
  AC_MSG_WARN($WARNING)
fi







LIB_TARGETS="libmp3lame.a"
LIB_INSTALL_TARGETS="install_static_lib"




AC_ARG_ENABLE(shared, 
  [  --enable-shared=yes,no      Whether to make shared library [default yes]],
    CONFIG_SHARED="$enableval", CONFIG_SHARED="yes")

if test "$CONFIG_SHARED" != "no" ; then
	case $host in
	*-*-linux*)
		LIB_TARGETS="$LIB_TARGETS libmp3lame.so"
		LIB_INSTALL_TARGETS="$LIB_INSTALL_TARGETS install_shared_lib"
		# need position independent code for shared library
		CFLAGS="$CFLAGS -fPIC"
	esac
fi

#
# this is from vorbis
#
dnl check GLIBC
case $host in 
*86-*-linux*)
	# glibc < 2.1.3 has a serious FP bug in the math inline header
	# that will cripple Vorbis.  Look to see if the magic FP stack
	# clobber is missing in the mathinline header, thus indicating
	# the buggy version

	AC_EGREP_CPP(log10.*fldlg2.*fxch,[
		#define __LIBC_INTERNAL_MATH_INLINES 1
	     	#define __OPTIMIZE__
		#include <math.h>
		],bad=maybe,bad=no)

	AC_MSG_CHECKING(glibc mathinline bug)
	if test ${bad} = "maybe" ;then
	      AC_EGREP_CPP(log10.*fldlg2.*fxch.*st\([[0123456789]]*\),
				[
				#define __LIBC_INTERNAL_MATH_INLINES 1
			     	#define __OPTIMIZE__
				#include <math.h>
				],bad=no,bad=yes)
	fi
	AC_MSG_RESULT(${bad})
	if test ${bad} = "yes" ;then
 AC_MSG_WARN([                                                        ])
 AC_MSG_WARN([********************************************************])
 AC_MSG_WARN([* The glibc headers on this machine have a serious bug *])
 AC_MSG_WARN([* in /usr/include/bits/mathinline.h  This bug affects  *])
 AC_MSG_WARN([* all floating point code, not only LAME, but all code *])
 AC_MSG_WARN([* built on this machine. Upgrading to glibc 2.1.3 is   *])
 AC_MSG_WARN([* strongly urged to correct the problem.               *])
 AC_MSG_WARN([*Note: that upgrading glibc will not fix any previously*])
 AC_MSG_WARN([* built programs; this is a compile-time time bug.     *])
 AC_MSG_WARN([* To work around the problem for this build of LAME,   *])
 AC_MSG_WARN([* autoconf is disabling all math inlining.  This will  *])
 AC_MSG_WARN([* hurt LAME performace but is necessary for LAME to    *])
 AC_MSG_WARN([* work correctly.  Once glibc is upgraded, rerun       *])
 AC_MSG_WARN([* configure and make to build with inlining.           *])
 AC_MSG_WARN([********************************************************])
 AC_MSG_WARN([                                                        ])

	CONFIG_DEFS="-D__NO_MATH_INLINES $CONFIG_DEFS"
	fi;;
esac


dnl configure use of VBR bitrate histogram
dnl todo: always use yes as default, use simulation instead ?
AC_MSG_CHECKING(use of VBR bitrate histogram)
if test ".$HAVE_TERMCAP" != "."; then
  BRH_DEFAULT=yes
else
  BRH_DEFAULT=no
fi
AC_ARG_ENABLE(brhist, 
  [  --enable-brhist             Include the VBR bitrate histogram feature (default:yes if any termcap available)],
  CONFIG_BRHIST="$enableval", CONFIG_BRHIST="$BRH_DEFAULT")
if test "$CONFIG_BRHIST" != "no" ; then
  FRONTEND_SOURCES="\$(brhist_sources) $FRONTEND_SOURCES"
  if test "$BRH_DEFAULT" = "yes" ; then
    FRONTEND_LDFLAGS="-l$HAVE_TERMCAP $FRONTEND_LDFLAGS"
    CONFIG_DEFS="-DBRHIST $CONFIG_DEFS"
    CONFIG_BRHIST="yes, with $HAVE_TERMCAP"
  else
    CONFIG_DEFS="-DBRHIST -DNOTERMCAP $CONFIG_DEFS"
    CONFIG_BRHIST="yes, simulated termcap"
  fi
fi
AC_MSG_RESULT($CONFIG_BRHIST)









dnl ############### host dependent setup #####################

# generic defaults. OS specific options go in versious sections below
OPTIMIZATION=-O

case $host in
*-*-linux*)
##########################################################################
# LINUX   
##########################################################################
CFLAGS="-pedantic -Wall $CFLAGS"

# suggested for gcc-2.7.x
   OPTIMIZATION="-O3 -fomit-frame-pointer -funroll-loops -ffast-math  -finline-functions"
#  OPTIMIZATION="-O9 -fomit-frame-pointer -fno-strength-reduce -mpentiumpro -ffast-math -finline-functions -funroll-loops -Wall -malign-double -g -march=pentiumpro -mfancy-math-387 -pipe"

#  for debugging:
#  CONFIG_DEFS="-UNDEBUG -DABORTFP $CONFIG_DEFS"
#  OPTIMIZATION="-O -ggdb"

#  for lots of debugging:
#  CONFIG_DEFS="-UNDEBUG -DABORTFP -DDEBUG $CONFIG_DEFS"
#  OPTIMIZATION="-O -g" 


#  some alternate code (work in progress Robert.Hegemann@gmx.de)
#  CONFIG_DEFS="-DRH_AMP -DRH_VALIDATE_MS $CONFIG_DEFS"
#  CONFIG_DEFS="-DKLEMM_01 $CONFIG_DEFS"
# these options for gcc-2.95.2 to produce fast code
#  OPTIMIZATION = \
#	-O9 -fomit-frame-pointer -march=pentium \
#	-finline-functions -fexpensive-optimizations \
#	-funroll-loops -funroll-all-loops -pipe -fschedule-insns2 \
#	-fstrength-reduce \
#	-malign-double -mfancy-math-387 -ffast-math 


##########################################################################
# LINUX on Digital/Compaq Alpha CPUs
##########################################################################
case $host in
alpha*-*-linux*)

################################################################
#### Check if 'ccc' is in our path
####   if not, use 'gcc'
################################################################
if test "`which ccc 2>/dev/null | grep -c ccc`" = ".0" ; then

# double is faster than float on Alpha
dnl CONFIG_DEFS="-DFLOAT=double $CONFIG_DEFS"

OPTIMIZATION="-O4 -fomit-frame-pointer -ffast-math -funroll-loops \
                -mfp-regs -fschedule-insns -fschedule-insns2 \
                -finline-functions"
# add "-mcpu=21164a -Wa,-m21164a" to optimize for 21164a (ev56) CPU

################################################################
#### else, use 'ccc'
################################################################
else

# Compaq's C Compiler
CC=ccc

################################################################
#### set 'OPTIMIZATION = -arch host -tune host' 
####              to generate/tune instructions for this machine
####     'OPTIMIZATION += -migrate -fast -inline speed -unroll 0' 
####              tweak to run as fast as possible :)
####     'OPTIMIZATION += -w0' 
####              set warning and linking flags
################################################################
OPTIMIZATION="-arch host -tune host"
OPTIMIZATION="-migrate -fast -inline speed -unroll 0 $OPTIMIZATION"
OPTIMIZATION="-w0 $OPTIMIZATION"


################################################################
#### to debug, uncomment
################################################################
# For Debugging
#OPTIMIZATION="-g3 $OPTIMIZATION"

################################################################
#### define __DECALPHA__ (i was getting re-declaration warnings
####   in machine.h
################################################################
# Define DEC Alpha
CONFIG_DEFS="-D__DECALPHA__ $CONFIG_DEFS"

# optimized libffm (free fast math library)
#CONFIG_MATH_LIB="-lffm"
# Compaq's fast math library
if test ".$HAVE_LIBCPML" != "." ; then
	CONFIG_MATH_LIB="$HAVE_LIBCPML"
fi

fi  #  gcc or ccc?
;; # alpha

esac  
;; #  linux

##########################################################################
# FreeBSD
##########################################################################
# todo

##########################################################################
# OpenBSD
##########################################################################
# todo


##########################################################################
# SunOS
##########################################################################
sparc-*-sunos4*)
	CC="cc"
	OPTIMIZATION="-O -xCC"
	MAKEDEP="-xM"
	# for gcc, use instead:
	#   CC="gcc"
	#   OPTIMIZATION="-O"
	#   MAKEDEP="-M"
	endif
;; #SunOS

##########################################################################
# SGI
##########################################################################
*-sgi-irix*)
	CC="cc"
	OPTIMIZATION="-O3 -woff all"
;; # SGI

##########################################################################
# Compaq Alpha running Dec Unix (OSF)
##########################################################################
alpha*-dec-osf*)
	CC = cc
	OPTIMIZATION="-fast -O3 -std -g3 -non_shared"
;; #OSF

##########################################################################
# BeOS
##########################################################################
*-*-beos*) # todo:is this the right string ?
	CC="\$(BE_C_COMPILER)"
	case $host in
	bepc*-*-*) # todo: is this right architecture ? was: if ($(ARCH),BePC)
	   OPTIMIZATION="-O9 -fomit-frame-pointer -march=pentium \
			-mcpu=pentium -ffast-math -funroll-loops \
			-fprofile-arcs -fbranch-probabilities"
	;;
   	*) OPTIMIZATION="-opt all"
	   MAKEDEP="-make"
	;;
	esac
;; #BeOS
esac

# todo: include the following tests in the case-list
UNAME=`uname`
ARCH=`uname -m`

###########################################################################
# MOSXS (Rhapsody PPC)
###########################################################################
if test "$UNAME" = "Rhapsody"; then
   CC="cc"
   OPTIMIZATION="-O9 -ffast-math -funroll-loops -fomit-frame-pointer"
   MAKEDEP="-make"
fi

##########################################################################
# OS/2
##########################################################################
# Properly installed EMX runtime & development package is a prerequisite.
# tools I used: make 3.76.1, uname 1.12, sed 2.05, PD-ksh 5.2.13
#
##########################################################################
if test "$UNAME" = "OS/2"; then
   SHELL=sh	
   CC=gcc
   OPTIMIZATION="-O3"
   FILE_EXTENSION=".exe"

# I use the following for slightly better performance on my Pentium-II
# using pgcc-2.91.66:
#  OPTIMIZATION="-O6 -ffast-math -funroll-loops -mpentiumpro -march=pentiumpro"

# Uncomment & inspect the GTK lines to use MP3x GTK frame analyzer.
# Properly installed XFree86/devlibs & GTK+ is a prerequisite.
# The following works for me using Xfree86/OS2 3.3.5 and GTK+ 1.2.3:
#   CONFIG_DEFS="-DHAVEGTK -D__ST_MT_ERRNO__ $CONFIG_DEFS"
#   INCLUDES="-IC:/XFree86/include/gtk12 -IC:/XFree86/include/glib12 \
#             -IC:/XFree86/include $INCLUDES"
#   FRONTEND_LDFLAGS="-LC:/XFree86/lib -lgtk12 -lgdk12 -lgmodule -lglib12 \
#             -lXext -lX11 -lshm -lbsd -lsocket -lm $FRONTEND_LDFLAGS"
#   FRONTEND_CFLAGS="-Zmtd -Zsysv-signals -Zbin-files $FRONTEND_CFLAGS"
fi

###########################################################################
# MSDOS/Windows
###########################################################################
if test "$UNAME" = "MSDOS"; then
  FILE_EXTENSION=".exe"
  RM_F=
fi

###########################################################################
# AmigaOS
###########################################################################
# Type 'Make ARCH=PPC' for PowerUP and 'Make ARCH=WOS' for WarpOS
#
###########################################################################
if test "$UNAME" = "AmigaOS" ; then
	CC="gcc -noixemul"
	OPTIMIZATION="-O3 -ffast-math -funroll-loops -m68020-60 -m68881"
	MAKEDEP="-MM"
	if test "$ARCH" = "WOS"; then
		CC="ppc-amigaos-gcc -warpup"
		OPTIMIZATION="-O3 -ffast-math -fomit-frame-pointer \
			-funroll-loops -mmultiple -mcpu=603e"
		AR="ppc-amigaos-ar"
		RANLIB="ppc-amigaos-ranlib"
	fi
	if test "$ARCH",PPC; then
		CC="ppc-amigaos-gcc"
		OPTIMIZATION="-O3 -ffast-math -fomit-frame-pointer \
			-funroll-loops -mmultiple -mcpu=603e"
		AR="ppc-amigaos-ar"
		RANLIB="ppc-amigaos-ranlib"
	fi
fi


CFLAGS="$OPTIMIZATION $CFLAGS"
LDFLAGS="$CONFIG_MATH_LIB $LDFLAGS"




AC_SUBST(INCLUDES)
AC_SUBST(FILE_EXTENSION)

AC_SUBST(FRONTEND_LDFLAGS)
AC_SUBST(FRONTEND_CFLAGS)
AC_SUBST(FRONTEND_SOURCES)

AC_SUBST(LIB_SOURCES)
AC_SUBST(GTK_LDFLAGS)
AC_SUBST(GTK_CFLAGS)

AC_SUBST(LIB_INSTALL_TARGETS)
AC_SUBST(LIB_TARGETS)

AC_SUBST(LIB_MAJOR_VERSION)
AC_SUBST(LIB_MINOR_VERSION)

AC_SUBST(AR)
AC_SUBST(MAKEDEP)
AC_SUBST(RM_F)
AC_SUBST(CONFIG_DEFS)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME

dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(gettimeofday socket strtol)

AC_OUTPUT(Makefile libmp3lame/Makefile frontend/Makefile analyzer/Makefile )
