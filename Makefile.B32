# Makefile for LAME 3.xx using Borlands free C++ compiler.
#
# Based on the original LAME makefile.
#

# generic defaults. OS specific options go in versious sections below
PGM = lame
CC = gcc
CC_OPTS =  -O
GTK = 
GTKLIBS = 
SNDLIB = -DLAMESNDFILE
LIBSNDFILE =  
LIBS = -lm 
MAKEDEP = -M
BRHIST_SWITCH = 
LIBTERMCAP = 
RM = rm -f
MP3LIB = libmp3lame/libmp3lame.lib


##########################################################################
# -DHAVEMPGLIB compiles the mpglib *decoding* library into libmp3lame
##########################################################################
CPP_OPTS = $(CPP_OPTS) -DHAVE_MPGLIB 


##########################################################################
# Define these in the OS specific sections below to compile in support
# for the Ogg Vorbis audio format (both decoding and encoding)
# 
# VORBIS = -DHAVE_VORBIS  -I ../vorbis/include
# VORBIS_LIB = -L ../vorbis/lib vorbis.lib
##########################################################################

##########################################################################
# Define these in the OS specific sections below to compile in code 
# for the optional VBR bitrate histogram.  
# Requires ncurses, but libtermcap also works.  
# If you have any trouble, just dont define these
#
# BRHIST_SWITCH = -DBRHIST -DHAVE_TERMCAP
# LIBTERMCAP = ncurses.lib
# LIBTERMCAP = termcap.lib
#
# or, to try and simulate TERMCAP (ANSI), use:
# BRHIST_SWITCH = -DBRHIST
#
##########################################################################


##########################################################################
# Define these in the OS specific sections below to compile in code for:
#
# SNDLIB =                no file i/o 
# SNDLIB = -DLAMESNDFILE  to use internal LAME soundfile routines 
# SNDLIB = -DLIBSNDFILE   to use Erik de Castro Lopo's libsndfile 
# http://www.zip.com.au/~erikd/libsndfile/
#
# Note: at present, libsndfile does not support input from stdin.  
#
# for example:
#  SNDLIB = -DLIBSNDFILE
#  LIBSNDFILE= ../sndfile/sndfile.lib
#  if libsndfile is in a custom location, try:
#  LIBSNDFILE=-L $(LIBSNDHOME) sndfile.lib -I $(LIBSNDHOME)
##########################################################################


##########################################################################
# Define these in the OS specific sections below to compile in code for
# the GTK mp3 frame analyzer
#
# Requires  -DHAVE_MPGLIB
# and SNDLIB = -DLAME or -DLIBSNDFILE
#
# GTK = -DHAVE_GTK `gtk-config --cflags`
# GTKLIBS = `gtk-config --libs` 
#
##########################################################################




##########################################################################
# Windows, Borland C++
##########################################################################

PGM = lame.exe
CC = bcc32
CC_OPTS = -q -5 -O2 -OS
LIBS =
MAKEDEP =
RM = del

# Comment out next line if you want to remove VBR histogram capability
BRHIST_SWITCH = -DBRHIST

# uncomment to use LIBSNDFILE
# SNDLIB = -DLIBSNDFILE
# LIBSNDHOME = ../libsndfile/src/
# LIBSNDFILE= -L $(LIBSNDHOME) sndfile.lib -I $(LIBSNDHOME)

# uncomment to compile in Vorbis support
# VORBIS = -DHAVE_VORBIS -I ../vorbis/include
# VORBIS_LIB = -L ../vorbis/lib vorbis.lib

# for debugging:
# CC_OPTS = $(CC_OPTS) -UNDEBUG


CC_SWITCHES = -DHAVE_CONFIG_H -DNDEBUG $(CC_OPTS) $(SNDLIB) $(GTK) $(BRHIST_SWITCH) $(VORBIS) 
frontend_sources = \
        frontend/brhist.c \
	frontend/get_audio.c \
        frontend/lametime.c \
        frontend/parse.c \
	frontend/portableio.c \
	frontend/timestatus.c 

lib_sources = \
	libmp3lame/bitstream.c \
	libmp3lame/encoder.c \
	libmp3lame/fft.c \
        libmp3lame/id3tag.c \
        libmp3lame/lame.c \
        libmp3lame/newmdct.c \
	libmp3lame/psymodel.c \
	libmp3lame/quantize.c \
	libmp3lame/quantize_pvt.c \
	libmp3lame/set_get.c \
	libmp3lame/vbrquantize.c \
	libmp3lame/reservoir.c \
	libmp3lame/tables.c \
	libmp3lame/takehiro.c \
	libmp3lame/util.c \
	libmp3lame/vorbis_interface.c \
	libmp3lame/mpglib_interface.c \
        libmp3lame/VbrTag.c \
        libmp3lame/version.c \
        mpglib/common.c \
        mpglib/dct64_i386.c \
        mpglib/decode_i386.c \
        mpglib/layer1.c \
        mpglib/layer2.c \
        mpglib/layer3.c \
        mpglib/tabinit.c \
        mpglib/interface.c 


gtk_sources = frontend/gtkanal.c frontend/gpkplotting.c

gtk_obj = $(gtk_sources:.c=.obj)
frontend_obj = $(frontend_sources:.c=.obj)
lib_obj = $(lib_sources:.c=.obj)



NASM = nasmw
# Borland C++ specific
ASFLAGS=-DWIN32 -f obj -i i386/

.nas.obj:
	$(NASM) $(ASFLAGS) $< -o $@

## use MMX extension. you need nasm and MMX supported CPU.
#CC_SWITCHES = $(CC_SWITCHES) -DMMX_choose_table
#OBJ = $(OBJ) i386\choose_table.obj

.c.obj:
	$(CC) -o$@ $(CPP_OPTS) $(CC_SWITCHES) -c $<

all: $(PGM)

$(lib_sources) $(frontend_sources) : config.h

config.h: configMS.h
	-copy configMS.h config.h

$(PGM):	main.obj $(frontend_obj) $(MP3LIB)
	$(CC) -e$@ -WC $(CC_OPTS) frontend/main.obj  $(frontend_obj) $(MP3LIB) $(LIBS) $(LIBSNDFILE) $(GTKLIBS) $(LIBTERMCAP) $(VORBIS_LIB)

mp3x:	mp3x.o $(frontend_obj) $(gtk_obj) $(MP3LIB)
	$(CC) -emp3x frontend/mp3x.obj $(frontend_obj) $(gtk_obj) $(gtk_obj) $(MP3LIB) $(LIBS) $(LIBSNDFILE) $(GTKLIBS) $(LIBTERMCAP) $(VORBIS_LIB)

mp3rtp:	frontend/rtp.obj frontend/mp3rtp.obj $(MP3LIB)
	$(CC) -emp3rtp frontend/mp3rtp.obj frontend/rtp.o $(frontend_obj) $(MP3LIB) $(LIBS) $(LIBSNDFILE) $(GTKLIBS) $(LIBTERMCAP) $(VORBIS_LIB)

libmp3lame/libmp3lame.lib: $(lib_obj)
	-del $@
	tlib /a $@ $(lib_obj:/=\)

Dll/lame_enc.dll: Dll/BladeMP3EncDLL.obj $(MP3LIB)
	$(CC) -e$@ $(CC_OPTS) -WD Dll/BladeMP3EncDLL.obj $(MP3LIB) $(LIBS) $(LIBSNDFILE) $(VORBIS_LIB)

clean:
	-del *.obj
	-del *.lib
	-del i386\*.obj
	-del Dll\*.obj
	-del mpglib\*.obj
	-del $(PGM)

#
#  testcase.mp3 is a 2926 byte file.  The first number output by
#  wc is the number of bytes which differ between new output
#  and 'official' results.  
#
#  Because of compilier options and effects of roundoff, the 
#  number of bytes which are different may not be zero, but
#  should be at most 30.
#
test: $(PGM)
	lame  --nores -h testcase.wav testcase.new.mp3
	cmp testcase.new.mp3 testcase.mp3

testg: $(PGM)
	lame -g -h ..\test\castanets.wav
