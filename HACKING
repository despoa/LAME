First, see the file STYLEGUIDE



************************************************************************
LAME API

For a general outline of the code, see the file API.  
Also, main.c is a simple front end to libmp3lame.a

The guts of the code are called from lame_encode_buffer().

lame_encode_buffer() handles buffering and resampling, and
then calls lame_encode_frame() for each frame:

lame_encode_frame():
   l3psycho_anal()        compute masking thresholds
   mdct_sub()             compute MDCT coefficients
   iteration_loop()       choose scalefactors (via iteration)
                          which determine noise shapping, and 
                          choose best huffman tables for lossless compression

   format_bitstream       format the bitstream.  when data+headers are complete,
                          output to internal bit buffer.
   copy_buffer()          copy internal bit buffer into user's mp3 buffer




************************************************************************

THREADSAFE:

Lame is supposed to be threadsafe.  But it is not yet.

Some static variables in takehiro.c need to be moved
into lame_internal_flags (in util.h).  

There are a lot of static variables in timestatus.c,
but these variables are only used by the output display.
These routines should eventually be moved out of the library
and into the front end.  So dont try to make this
data thread safe!



************************************************************************
Global Variables:

There are two types of global variables.  All data in
both strucs is initialized to zero.

1. lame_global_flags *gfp

These are input paramters which are set by the calling program,
and some information which the calling program may be interested in.

This struct is defined in lame.h.  The calling program 
must instantiate it.


2. lame_internal_flags *gfc

For internal data which is not visable to the user.  
Most global variables go here.

Defined in util.h.  Data for which the size is known
in advace should be explicitly declaired (for example,
float xr[576]);  Data which needs to be malloc'd is
handled by:  (assume the data is used by the resample() routine)

1.  in lame_init_params(), call lame_init_resample().
    lame_init_resample will malloc the data.

2.  be sure to free the data in freegfc()


If the data to be balloc'd is large and only used in
certain conditions, use the following:  (this has the
disadvantage that it is hard to catch and return error
flags all the way back up the call stack)

1. Add the variable: lame_init_resampl() to gfc.
2. In the resample routine, there should be some code like this:

   if (0==gfc->lame_init_resample) {
       gfc->lame_init_resample=1;
      /* initialization code: malloc() data, etc */
   }

3. The data should be free'd in the routine freegfc().






















 


