encoding core:
0.
There's some problem in very the first frame MDCT calculation.


1.
tuning lowpass with fixed SFB21 oddness code.
Old LAME (3.x) has bugs in sfb21 handling code and it decrease quality
over 16kHz region. So the lowpass values are adjusted to conceal the bug.

Now the bug is almost removed. We need re-tuning the lowpass values for
new LAME.



2. New Xing VBR header is incompable with MS Media Player.  but works
with most other players.  Most likely MS took some shortcuts and
made some invalid assumptions about VBR header.  Should we
track this down and see if we can come up with a work around?
VBRfix code may give us an answer.



3. Some switches to support the "BUGGY" decoders.
--strictly-enforce-ISO is not perfect to these players.
It seems it needs forcing coupling block type, lower IXMAX_VAL, no
scfsi, no scalefact_scale, and so on. 



4.
There're some sound quality regression compared with LAME3.x
- short block problem (i.e. spahm.wav)
- white noise problem (i.e. dr4.wav)


5.
Better intensity stereo.
And LAME4 should support it when MPEG2 Layer3 (currently not).

Note: mpg123 (and all derivatives, like xmms and lame/mpglib)
have bugs in the intensity stereo decoding.  Bugs have been there
for years since there are very few intensity stereo mp3's out there.


6.
Threshold calculation on short blocks. LAME4's block switching is
better than LAME3 with nspsy, but threshold calculation is not.
It does not support temporal masking, and so on.


7.
LAME has problems with test signals.
1. pure DC input.(i.e. a square wave with a frequency well below 20 Hz)
2. sin sweep signal (i.e. 20Hz->22kHz in 60sec)
3. steep/saw wave (i.e. 100Hz)
Seems not very important, but they are related to "REAL" problem of
some kind of music. 1 and 2 are caused by ATH handling problem.
3 is by short block threshold problem.


8.
Tuning resorvoir handling (especially for low bitrates); CBR/ABR arround
90kbps (-b 90) is much worse than VBR quality 9 (-V 9). This is probabry
because of poor resorvoir handling.

Right now the code is tuned with the LAME3's pe calculation and
psymodel. Now they are all changed and we should re-tune these code.

And sometimes it drains too much bits. That's should be fixed.



9.
We should rewrite all the documentation, such as PRESET, INSTALL, README*,...


10.
Clipping detection and replaygain tag:
LAME 3.x supports this, but LAME4 does not.


15. 
LAME has a 31 point FIR filter used for resampling, which
can also be used as a lowpass.  When resampling is done, 
use that filter to also lowpass instead of the polyphase filter.


16.
Even when resampling is not needed, should we use an FIR filter
for the lowpass?  If it is not too much slower, yes.  If it
is slower, then it should be an option since it will produce
higher quality.  


17.
better highpass/lowpass filter:
We need to first replace the polyphase filter with an FIR filter.
And setting highpass filtering to enhance the playback frequency range.


20.
bug in resample code:  downsampling from 44101 to 44100 causes a seg
fault.  Workaround in place for now:  resampling disabled if
input/output samplerates agree to 4 digits.

I plan to replace the resampling code of ssrc (Shibatch sampling rate
conv.) and solve this problem. (takehiro)




50.
Better tonality estimation.
Nspsytune seems to miss tonals when several of them are too narrow.
maybe nspsy2 based model will solve it.




70.
Use mixed blocks.




998.
Merge GOGO's fast assembler routines.




1500.
Integrate plusV extensions



2000.
2 pass VBR/ABR support. It may improve the quality, but I am not sure.






NOGAP encoding:

-nogap:  more testing, fix options, test id3 tags?
Can we change id3 tags without reseting the encoder??
At the end of encoding 1.wav, call lame_get_mf_samples_to_encode()
to find the number of non encoded buffered PCM samples.  Then
encode samples from 2.wav until these PCM samples have been
encoded, *THEN* call lame_encode_flush_nogap() and close
out file 1.mp3.


NOGAP decoding:  
lame --decode --nogap file1.mp3 file2.mp3 file3.mp3
should also work.  What needs to be done:
get_audio.c:  We need a way to open a second mp3 file, without
              calling lame_decode_init() and reinitializing mpglib.
              And the mpglib needs to know to look for new Xing
              tags at the beginning of file2.mp3 and file3.mp3.


frontend code:

1.
Does stdin work when LAME is compiled to use libsndfile? 
(new version of libsndfile will support this - try this out)

2.
Code is a complete mess. But it has so many debugged features it will
be a lot of work to re-write.

8.
We should consider moving the experts options from the *long
help* text into an *experts only* help text. The average Joe gets
knocked down by the huge number of possibilities to setup lame.

999.
It would be nice to save some information whilst encoding when
wave <-> mp3
	a RIFF/wave can contain LIST chunks with information
	about author, title, etc. 
	id3tag in mp3 can contain these information, too.

	auto converting each of them may be good.



decoding core:
1. 
modify mpglib to output
floating point and have finaly quantization step a
easy-to-change module so it can output other than 16bit.
(replace mpglib with MAD?  MAD has agreed to write a call back
which will return all data needed by the frame analyzer)

1.1  mgplib has bugs with i-stereo.  flag denoting invalid
i-stereo value (= frame is m/s stereo) is not correct.  

997.
ACM wrapper for LAME.  Steve Lhomme has joied thed project
and is working on an ACM codec!

ACM is still in wide use, although MSFT has moved on to 
DirectShow filters, or the lighter weight "DMO".  
We do have a beta directshow filter.

Contact "Florian Bruckner" <h9651030@miraculix.wu-wien.ac.at> for info - 
he is working on the VorbisACM.





Build environment
1. MSVC project files.  It would be nice to create a working
   MSVC6 workspace, which included all the projects as possible
   targets:
          lame.exe
          mp3x.exe   (require GTK libs)
          lame_enc.dll   
          ACM codec
          directshow codec

   I think the only MSVC5 project that we need to preserve is
   for lame_enc.dll, since Albert Faber (still?) doesn't use VC6?
   But no reason we cant have VC5 and VC6 project files for the dll.

2. more 64 bit environment support.

3. check the "HACKY and FAST" code on many environments. They are
really fast, but are not confirmed to run on all environments.

